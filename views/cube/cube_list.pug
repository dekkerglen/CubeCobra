extends cube_layout

block cube_toolbar
  link(rel='stylesheet' href='/css/tags.css')
  link(rel='stylesheet' href='/css/editcube.css')
  //edit controls
  .usercontrols
    nav.navbar.navbar-expand-md.navbar-light
      .view-style-select
        label.sr-only(for='viewSelect') Cube View Style
        select#viewSelect.form-control
          option(selected='' value='table') Table View
          option(value='spoiler') Visual Spoiler
          if user
            if user.id == cube.owner
              option(value='list') List View
          option(value='curve') Curve View
      button.navbar-toggler(type='button' data-toggle='collapse' data-target='#user-controls-nav' aria-controls='user-controls-nav' aria-expanded='false' aria-label='Toggle User Controls')
        span.navbar-toggler-icon
      #user-controls-nav.collapse.navbar-collapse
        ul.navbar-nav.ml-auto
          if user
            if user.id == cube.owner
              li.nav-item
                a.nav-link(href='#', data-toggle="collapse" data-target="#navedit" aria-controls="navedit" aria-expanded="false" aria-label="Toggle navigation") Add/Remove
          li.nav-item
            a.nav-link(href='#', data-toggle="collapse" data-target="#navsort" aria-controls="navsort" aria-expanded="false" aria-label="Toggle navigation") Sort
          li.nav-item
            a.nav-link(href='#', data-toggle="collapse" data-target="#navfilter" aria-controls="navfilter" aria-expanded="false" aria-label="Toggle navigation") Filter
          li.nav-item
            a.nav-link(href='#', data-toggle="collapse" data-target="#navcompare" aria-controls="navcompare" aria-expanded="false" aria-label="Toggle navigation") Compare
          if user && user.id == cube.owner
            li.nav-item
              a(href="#")#massEdit.nav-link Mass Edit
          li.nav-item
            a(href="#")#tagColors.nav-link
              if user && user.id == cube.owner
                | Set Tag Colors
              else
                | View Tag Colors
          if user && user.id == cube.owner
            li.nav-item.dropdown
              a#bulkdropdown.nav-link.dropdown-toggle(href='#', role='button', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false') Bulk Upload
              .dropdown-menu(aria-labelledby='bulkdropdown')
                a.dropdown-item(href='#', data-toggle='modal', data-target='#pasteBulkModal') Paste Text
                a.dropdown-item(href='#', data-toggle='modal', data-target='#uploadBulkModal') Upload File
                a.dropdown-item(href='#', data-toggle='modal', data-target='#importModal') Import from Cubetutor
          li.nav-item.dropdown
            a#exportdropdown.nav-link.dropdown-toggle(href='#', role='button', data-toggle='dropdown', aria-haspopup='true', aria-expanded='false') Export
            .dropdown-menu(aria-labelledby='exportdropdown')
              a.dropdown-item(href='/cube/download/plaintext/'+cube_id) Card Names (.txt)
              a.dropdown-item(href='/cube/download/csv/'+cube_id) Comma Separated (.csv)
              a.dropdown-item(href='/cube/download/forge/'+cube_id) Forge (.dck)
              a.dropdown-item(href='/cube/download/xmage/'+cube_id) XMage (.dck)
                br
          li.nav-item
            span#customImageDisplayMenuItem.nav-link.text-sm-left.text-center
              input#customImageDisplayToggle(type='checkbox')
              label(for='customImageDisplayToggle') Show Custom Images
    #accordion.accordion
      if user
        if user.id == cube.owner
          #navedit.collapse(data-parent='#accordion')
            .container
              .row.collapse.warnings
                .col
                  .alert.alert-danger(role='alert') Invalid input: card not recognized.
              .row
                .col
                  form(autocomplete='off').form-inline
                    .mb-2.autocomplete
                      input.form-control#addInput(style='width: 350px', type='text', placeholder='Card to Add')
                    button.btn.btn-success.mx-sm-1.mb-2#justAddButton(type='button') Just Add
                .col
                  form.form-inline
                    .mb-2.autocomplete
                      input.form-control#removeInput(style='width: 350px', type='text', placeholder='Card to Remove')
                    button.btn.btn-success.mx-sm-1.mb-2#removeButton(type='button') Remove / Replace
              .collapse.editForm
                form#changelistForm(method='POST', action='/cube/edit/'+cube_id)
                  .row
                    .col
                      br
                      label Changelist:
                      .editarea
                        p.editlist#changelist
                      br
                      input#changelistFormBody(type='hidden', name='body')
                      input#changelistBlog(type='hidden', name='blog')
                    .col
                      br
                      #form-group
                        label Blog Title:
                        input.form-control(maxlength='200' name='title', type='text' value='Cube Updated - Automatic Post')
                      #form-group
                        label Body:
                        include ../texteditor
                  .row
                    .col
                      input.btn.mr-sm-2.btn-success#saveChangesButton(type='button', value='Save Changes')
                      input.btn.mr-sm-2.btn-danger#discardAllButton(type='button', value='Discard All')
                      br
                      br
      #navsort.collapse(data-parent='#accordion')
        .container
          .row
            .col
              h5 Primary Sort
              select#primarySortSelect.custom-select
              br
              p
                em  Cards will be appear as duplicates if they fit in multiple categories. The counts will still only count each item once.
            .col
              #secondarySortCol
                h5 Secondary Sort
                select#secondarySortSelect.custom-select
          .row
            .col
              button.updateButton.btn.btn-success(type='button') Update Table
              a
              if user && user.id == cube.owner
                button#saveSortButton.btn.btn-success(type='button') Save as Default Sort
              br
              br
      #navfilter.collapse(data-parent='#accordion')
        .container
          .row
            .col
              .input-group.mb-3
                .input-group-prepend
                  label.input-group-text(for='filterInput') Filter
                input.form-control#filterInput(type='text', placeholder='Type Filters Here or Use Advanced Search below')
                .input-group-append
                  button#filterButton.btn.btn-success(type='button') Apply
              h5 Filters
              #filterarea
          .row
            .col
              button#resetButton.mr-sm-2.btn.btn-success(type='button') Reset Filters
              button#advancedSearchButton.mr-sm-2.btn.btn-success(type='button' data-toggle='modal', data-target='#filterModal') Advanced...
              a#resetButton.mr-sm-2.btn.btn-success(href="/filters") Syntax Guide
              br
              br
      #navcompare.collapse(data-parent='#accordion')
        .container
          .row
            .col
              form(autocomplete='off').form-inline
                .mb-2
                  input.form-control#compareInput(style='width: 350px', type='text', placeholder='Cube ID to Compare to This Cube')
                button.btn.btn-success.mx-sm-1.mb-2#compareButton(type='button') Compare Cubes
                br
                br

  input#cubeID(type='hidden', name='cubeID', value=cube_id)
  input#cuberaw(type='hidden', name='cuberaw', value=cube_raw)
  input#cubeTagColors(type='hidden', name='cubeTagColors', value=JSON.stringify(cube.tag_colors))
  input#hideTagColors(type='hidden', name='hideTagColors', value=(!!user && user.hide_tag_colors === true).toString())
  if user && user.id == cube.owner
    input#edittoken(type='hidden', name='edittoken', value='edit')
  if cube.default_sorts
    input#sort1(type='hidden', name='edittoken', value=cube.default_sorts[0])
    input#sort2(type='hidden', name='edittoken', value=cube.default_sorts[1])

block cube_content
  .container#cubelistarea
  #react-root

  // Filter Modal
  #filterModal.modal.fade(tabindex='-1', role='dialog')
    .modal-dialog.modal-dialog-centered.modal-lg(role='document')
      .modal-content
        .modal-header
          h5.modal-title Advanced Filter
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        .modal-body
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Card Name
            input#filterName.form-control(type='text', placeholder='Any words in the name, e.g. "Fire"')       
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Oracle Text
            input#filterOracle.form-control(type='text', placeholder='Any text, e.g. "Draw a card"')        
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text CMC
            select.custom-select#filterCMCOp
              option(value='=' selected='') equal to
              option(value='<') less than
              option(value='>') greater than
              option(value='<=') less than or equal to
              option(value='>=') greater than or equal to
              option(value='!') not equal to
            input#filterCMC.form-control(type='text', placeholder='Any value, e.g. "2"')   
          hr
          h6.span Color: 
            .form-check.form-check-inline
              input#filterColorW.form-check-input(type='checkbox', value='option1')
              label.form-check-label(for='groupContextModalCheckboxW')
                img(src='/content/symbols/w.png' alt='White' title='White')
            .form-check.form-check-inline
              input#filterColorU.form-check-input(type='checkbox', value='option2')
              label.form-check-label(for='groupContextModalCheckboxU')
                img(src='/content/symbols/u.png' alt='Blue' title='Blue')
            .form-check.form-check-inline
              input#filterColorB.form-check-input(type='checkbox', value='option3')
              label.form-check-label(for='groupContextModalCheckboxB')
                img(src='/content/symbols/b.png' alt='Black' title='Black')
            .form-check.form-check-inline
              input#filterColorR.form-check-input(type='checkbox', value='option4')
              label.form-check-label(for='groupContextModalCheckboxR')
                img(src='/content/symbols/r.png' alt='Red' title='Red')
            .form-check.form-check-inline
              input#filterColorG.form-check-input(type='checkbox', value='option5')
              label.form-check-label(for='groupContextModalCheckboxG')
                img(src='/content/symbols/g.png' alt='Green' title='Green')
            .form-check.form-check-inline
              input#filterColorC.form-check-input(type='checkbox', value='option6')
              label.form-check-label(for='groupContextModalCheckboxC')
                img(src='/content/symbols/c.png' alt='Colorless' title='Colorless')
          select.custom-select#filterColorOp
            option(value='=' selected='') Exactly these colors
            option(value='>=') Including these colors
            option(value='<=') At most these colors
          hr
          h6.span Color Identity: 
            .form-check.form-check-inline
              input#filterColorIdentityW.form-check-input(type='checkbox', value='option1')
              label.form-check-label(for='groupContextModalCheckboxW')
                img(src='/content/symbols/w.png' alt='White' title='White')
            .form-check.form-check-inline
              input#filterColorIdentityU.form-check-input(type='checkbox', value='option2')
              label.form-check-label(for='groupContextModalCheckboxU')
                img(src='/content/symbols/u.png' alt='Blue' title='Blue')
            .form-check.form-check-inline
              input#filterColorIdentityB.form-check-input(type='checkbox', value='option3')
              label.form-check-label(for='groupContextModalCheckboxB')
                img(src='/content/symbols/b.png' alt='Black' title='Black')
            .form-check.form-check-inline
              input#filterColorIdentityR.form-check-input(type='checkbox', value='option4')
              label.form-check-label(for='groupContextModalCheckboxR')
                img(src='/content/symbols/r.png' alt='Red' title='Red')
            .form-check.form-check-inline
              input#filterColorIdentityG.form-check-input(type='checkbox', value='option5')
              label.form-check-label(for='groupContextModalCheckboxG')
                img(src='/content/symbols/g.png' alt='Green' title='Green')
            .form-check.form-check-inline
              input#filterColorIdentityC.form-check-input(type='checkbox', value='option6')
              label.form-check-label(for='groupContextModalCheckboxC')
                img(src='/content/symbols/c.png' alt='Colorless' title='Colorless')
          select.custom-select#filterColorIdentityOp
            option(value='=' selected='') Exactly these colors
            option(value='>=') Including these colors
            option(value='<=') At most these colors
          hr 
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Mana Cost
            input#filterMana.form-control(type='text', placeholder='Any mana cost, e.g. "{1}{W}"')
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Type Line
            input#filterType.form-control(type='text', placeholder='Choose any card type, supertype, or subtypes to match')
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Tag
            input#filterTag.form-control(type='text', placeholder='Any text, e.g. "Zombie Testing"')            
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Status
            select.custom-select#filterStatus
              option(selected='')
              option(value='Not Owned') Not Owned
              option(value='Ordered') Ordered
              option(value='Owned') Owned
              option(value='Premium Owned') Premium Owned
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Price
            select.custom-select#filterPriceOp
              option(value='=' selected='') equal to
              option(value='<') less than
              option(value='>') greater than
              option(value='<=') less than or equal to
              option(value='>=') greater than or equal to
            input#filterPrice.form-control(type='text', placeholder='Any decimal number, e.g. "3.50"')        
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Foil Price
            select.custom-select#filterPriceFoilOp
              option(value='=' selected='') equal to
              option(value='<') less than
              option(value='>') greater than
              option(value='<=') less than or equal to
              option(value='>=') greater than or equal to
            input#filterPriceFoil.form-control(type='text', placeholder='Any decimal number, e.g. "3.50"')  
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Power
            select.custom-select#filterPowerOp
              option(value='=' selected='') equal to
              option(value='<') less than
              option(value='>') greater than
              option(value='<=') less than or equal to
              option(value='>=') greater than or equal to
              option(value='!') not equal to
            input#filterPower.form-control(type='text', placeholder='Any value, e.g. "2"')   
          .input-group.mb-3
            .input-group-prepend
              span.input-group-text Toughness
            select.custom-select#filterToughnessOp
              option(value='=' selected='') equal to
              option(value='<') less than
              option(value='>') greater than
              option(value='<=') less than or equal to
              option(value='>=') greater than or equal to
              option(value='!') not equal to
            input#filterToughness.form-control(type='text', placeholder='Any value, e.g. "2"')       
        .modal-footer
          button.btn.btn-danger(type='button', data-dismiss='modal', aria-label='Close') Cancel
          button.btn.btn-success#applyAdvancedFilterButton(type='button') Apply

  //group context modal
  if user && user.id == cube.owner
    #groupContextModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalCenterTitle', aria-hidden='true')
      .modal-dialog.modal-dialog-centered.modal-lg(role='document')
        .modal-content
          .modal-header
            h5.modal-title Edit Selected
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') Ã—
          .row.no-gutters
            .col-4#groupContextModalAreaContainer(style='padding: 4px;')
              #groupContextModalArea
              .price-area
            .col-8
              .modal-body
                .controls
                  h5 Set Status of All
                  .input-group.mb-3
                    .input-group-prepend
                      span.input-group-text Status
                    select#groupContextModalStatusSelect.custom-select(aria-label='Example select with button addon')
                      option(selected='')
                      option(value='Not Owned') Not Owned
                      option(value='Ordered') Ordered
                      option(value='Owned') Owned
                      option(value='Premium Owned') Premium Owned
                  h5 Override Attribute on All
                  .input-group.mb-3
                    .input-group-prepend
                      span.input-group-text CMC
                    input#groupContextModalCMC.form-control(type='text', value='2')
                  .input-group.mb-3
                    .input-group-prepend
                      span.input-group-text Type
                    input#groupContextModalType.form-control(type='text', value='2')
                  h5 Color Identity Override:
                  .form-check.form-check-inline
                    input#groupContextModalCheckboxW.form-check-input(type='checkbox', value='option1')
                    label.form-check-label(for='groupContextModalCheckboxW')
                      img(src='/content/symbols/w.png' alt='White' title='White')
                  .form-check.form-check-inline
                    input#groupContextModalCheckboxU.form-check-input(type='checkbox', value='option2')
                    label.form-check-label(for='groupContextModalCheckboxU')
                      img(src='/content/symbols/u.png' alt='Blue' title='Blue')
                  .form-check.form-check-inline
                    input#groupContextModalCheckboxB.form-check-input(type='checkbox', value='option3')
                    label.form-check-label(for='groupContextModalCheckboxB')
                      img(src='/content/symbols/b.png' alt='Black' title='Black')
                  .form-check.form-check-inline
                    input#groupContextModalCheckboxR.form-check-input(type='checkbox', value='option4')
                    label.form-check-label(for='groupContextModalCheckboxR')
                      img(src='/content/symbols/r.png' alt='Red' title='Red')
                  .form-check.form-check-inline
                    input#groupContextModalCheckboxG.form-check-input(type='checkbox', value='option5')
                    label.form-check-label(for='groupContextModalCheckboxG')
                      img(src='/content/symbols/g.png' alt='Green' title='Green')
                  .form-check.form-check-inline
                    input#groupContextModalCheckboxC.form-check-input(type='checkbox', value='option6')
                    label.form-check-label(for='groupContextModalCheckboxC')
                      img(src='/content/symbols/c.png' alt='Colorless' title='Colorless')
                  br
                  em Selecting no mana symbols will cause the selected cards' color identity to remain unchanged. Selecting only colorless will cause the selected cards' color identity to be set to colorless.
                  br
                  br
                  h5 Edit Tags
                  .form-check
                    input#groupContextAdd.form-check-input(type='radio', name='nameType', value='~', checked='')
                    label.form-check-label(for='groupContextAdd') Add tags to All
                  .form-check
                    input#groupContextRemove.form-check-input(type='radio', name='nameType', value='=')
                    label.form-check-label(for='groupContextRemove') Remove tags from All
                  br
                  .tags-area#groupContextTags
                    .tags-input(data-name='tags-input')
                      span.tags
                      input.hidden-input(type='hidden')
                      input.main-input(maxlength="24")
                br
                br
                p
                  em TCGplayer currently does not support mass entry while preserving card versions, be sure to verify any card versions after using 'Buy all'.

          .modal-footer
            button#groupContextRemoveButton.btn.btn-danger(type='button') Remove all from cube
            form#groupContextBuyForm(method='POST', action='#', target="_blank")
              input#groupContextBuyHidden.form-control.col-sm-9(name='c', type='hidden')
              input.btn.btn-secondary(type='submit',value='Buy all')
            button#groupContextModalSubmit.btn.btn-success(type='button') Apply to all

  // Modal
  #tagColorsModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalCenterTitle', aria-hidden='true')
    .modal-dialog.modal-dialog-centered.modal-lg(role='document')
      .modal-content
        .modal-header
          h5#tagColorsTitle.modal-title
            if user && user.id == cube.owner
              | Set Tag Colors
            else
              | View Tag Colors
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        #showTagColors
          .form-check.form-check-inline
            input#showTagColorsCheckbox.form-check-input(type='checkbox')
            label.form-check-label(for='showTagColorsCheckbox') Show Tag Colors in Card List 
          if user && user.id == cube.owner
            div
              span(style="font-style: italic;") (Drag the tags below into a priority order to use for cards that have more than one tag)
        #tagsColumn.col

        .modal-footer
          button#tagColorsCancel.btn.btn-danger(type='button', data-dismiss='modal', aria-label='Close')
            if user && user.id == cube.owner
              | Cancel
            else
              | Close
          if user && user.id == cube.owner
            button#tagColorsSubmit.btn.btn-success(type='button') Save

  // Modal
  #contextModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalCenterTitle', aria-hidden='true')
    .modal-dialog.modal-dialog-centered.modal-lg(role='document')
      .modal-content
        .modal-header
          h5#contextModalTitle.modal-title Ambush Viper
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        .row.no-gutters
          .col-12.col-sm-4(style='padding: 4px;')
            img#contextModalImg.card-img.defaultCardImage(src="https://img.scryfall.com/cards/normal/front/0/c/0c082aa8-bf7f-47f2-baf8-43ad253fd7d7.jpg?1545408427", alt='...')
            .price-area
          .col-12.col-sm-8
            .modal-body
              fieldset(disabled=!user || user.id != cube.owner)
                h5 Card Attributes
                .input-group.mb-3
                  .input-group-prepend
                    span.input-group-text Version (Set and #)
                  select#contextModalVersionSelect.custom-select
                .input-group.mb-3
                  .input-group-prepend
                    span.input-group-text Status
                  select#contextModalStatusSelect.custom-select
                .input-group.mb-3
                  .input-group-prepend
                    span.input-group-text CMC
                  input#contextModalCMC.form-control(type='text', value='2')
                .input-group.mb-3
                  .input-group-prepend
                    span.input-group-text Type
                  input#contextModalType.form-control(type='text', value='2')
                .input-group.mb-3
                  .input-group-prepend
                    span.input-group-text Card Image URL
                  input#contextModalImageURL.form-control(type='text', value='2')
                h5 Color Identity Override:
                .form-check.form-check-inline
                  input#contextModalCheckboxW.form-check-input(type='checkbox', value='option1')
                  label.form-check-label(for='contextModalCheckboxW')
                    img(src='/content/symbols/w.png' alt='White' title='White')
                .form-check.form-check-inline
                  input#contextModalCheckboxU.form-check-input(type='checkbox', value='option2')
                  label.form-check-label(for='contextModalCheckboxU')
                    img(src='/content/symbols/u.png' alt='Blue' title='Blue')
                .form-check.form-check-inline
                  input#contextModalCheckboxB.form-check-input(type='checkbox', value='option3')
                  label.form-check-label(for='contextModalCheckboxB')
                    img(src='/content/symbols/b.png' alt='Black' title='Black')
                .form-check.form-check-inline
                  input#contextModalCheckboxR.form-check-input(type='checkbox', value='option4')
                  label.form-check-label(for='contextModalCheckboxR')
                    img(src='/content/symbols/r.png' alt='Red' title='Red')
                .form-check.form-check-inline
                  input#contextModalCheckboxG.form-check-input(type='checkbox', value='option5')
                  label.form-check-label(for='contextModalCheckboxG')
                    img(src='/content/symbols/g.png' alt='Green' title='Green')
                h5 Tags
                .tags-area#contextTags
                  .tags-input(data-name='tags-input')
                    span.tags
                    input.hidden-input(type='hidden')
                    input.main-input(maxlength="24")

        .modal-footer
          if user && user.id == cube.owner
            button#contextRemoveButton.btn.btn-danger(type='button')
              span.d-none.d-sm-inline Remove from cube
              span.d-sm-none Remove
          a#contextScryfallButton(href="#", target="_blank")
            button.btn.btn-secondary(type='button')
              span.d-none.d-sm-inline View on Scryfall
              span.d-sm-none Scryfall
          a#contextBuyButton(href="#", target="_blank")
            button.btn.btn-secondary(type='button') Buy
          if user && user.id == cube.owner
            button#contextModalSubmit.btn.btn-success(type='button') Save

  // Paste bulk Modal
  #pasteBulkModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='pasteBulkModalTitle', aria-hidden='true')
    .modal-dialog.modal-dialog-scrollable(role='document')
      .modal-content
        form(method='POST', action='/cube/bulkupload/'+cube_id)
          .modal-header
            h5#pasteBulkModalTitle.modal-title Bulk Upload - Paste Text
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') Ã—
          .modal-body
            p Acceptable plain text with one card name per line.
            textarea.form-control(maxlength='20000',rows='10', style='height:100%;', placeholder="Paste Cube Here (max length 20000)", name='body')
          .modal-footer
            #bulkspinner.collapse.spinner-border.text-success(role='status')
              span.sr-only Loading...
            button.btn.btn-success(type='submit', data-toggle='collapse', href='#bulkspinner') Upload
            button.btn.btn-secondary(type='button', data-dismiss='modal') Close

  // file upload
  #uploadBulkModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='uploadBulkModalTitle', aria-hidden='true')
    .modal-dialog.modal-dialog-scrollable(role='document')
      .modal-content
        .modal-header
          h5#uploadBulkModalTitle.modal-title Bulk Upload - Upload File
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        .modal-body
          p Acceptable files are either .txt (plaintext) with one card name per line, or .csv with the exact format as our .csv export.
          form#uploadFileForm.custom-file(ref='uploadForm', action='/cube/bulkuploadfile/'+cube_id, method='post', enctype='multipart/form-data')
            input#customFile.custom-file-input(style='padding:10px' type='file' name='document' onchange="$('#upload-file-info').html(this.files[0].name)")
            label#upload-file-info.custom-file-label(for='customFile') Choose file
        .modal-footer
          button.btn.btn-success(type='submit' form='uploadFileForm') Upload
          button.btn.btn-secondary(type='button', data-dismiss='modal') Close

  // cubetutor import
  #importModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='importModalTitle', aria-hidden='true')
    .modal-dialog.modal-dialog-scrollable(role='document')
      .modal-content
        .modal-header
          h5#importModalModalTitle.modal-title Bulk Upload - Import from Cubetutor
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        .modal-body
          p Most card versions will be mantained. Some cards with unknown sets will default to the newest printing. Tags will not be imported. Cubetutor does not recognize alternate versions
            |  of cards with the same name, in the same set (e.g. Hymn to Tourach alternate arts, Basic Lands, Everythingamajig). These cards should be checked to ensure the desired version
            |  has been added.
          .input-group.mb-3
            .input-group-prepend
              span#basic-addon3.input-group-text Cube ID  (enter cube id from URL):
            form#importForm.custom-file(ref='uploadForm', action='/cube/importcubetutor/'+cube_id, method='post', enctype='multipart/form-data')
              input.form-control(type='text', name='cubeid', placeholder='e.g. 123456')

        .modal-footer
          button.btn.btn-success(type='submit' form='importForm') Import
          button.btn.btn-secondary(type='button', data-dismiss='modal') Close
  // cubetutor import
  #selectEmptyModal.modal.fade(tabindex='-1', role='dialog')
    .modal-dialog.modal-dialog-scrollable(role='document')
      .modal-content
        .modal-header
          h5.modal-title Cannot Edit Selected
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        .modal-body
          p No cards are selected. To select and edit multiple cards, use the 'List View' and check the desired cards.

        .modal-footer
          button.btn.btn-secondary(type='button', data-dismiss='modal') Close

  #cubeSaveModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='cubeSaveModalTitle', aria-hidden='true')
    .modal-dialog.modal-dialog-scrollable(role='document')
      .modal-content
        .modal-header
          h5#cubeSaveModalTitle.modal-title Success
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') Ã—
        .modal-body
          p Default sorts saved successfully
        .modal-footer
          button.btn.btn-secondary(type='button', data-dismiss='modal') OK

  script(src='/js/utils.js')
  script(src='/js/autocomplete.js')
  script(src='/js/sortfilter.js')
  script(src='/js/tags.js')
  script(src='/js/editcube.js')
  script(src='/js/cube_list.bundle.js')
