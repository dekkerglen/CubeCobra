'use strict';

var objects = require('./objects');

var opts = module.exports.opts = function opts(opts, defaults) {
    if (!opts) {
        opts = process.argv;
    }

    var out = defaults || {};
    var last = void 0;
    for (var i = 0; i < opts.length; i++) {
        var is_flag = opts[i].substr(0, 1) === '-';
        if (is_flag && last) {
            out[last] = true;
        } else if (!is_flag && last) {
            out[last] = opts[i];
        }
        last = is_flag ? opts[i].replace(/^\-+/, '') : null;
    }
    if (last) out[last] = true;
    return out;
};

var stringIdentity = module.exports.stringIdentity = function (x) {
    return x.toString();
};

module.exports.joinAll = function joinAll(list, joiner, mapper) {
    if (!list) return '';
    return list.map(mapper || stringIdentity).join(joiner || '');
};

module.exports.uniq = function uniq(lambda, list) {
    lambda = lambda || stringIdentity;
    var values = {};
    for (var i = 0; i < list.length; i++) {
        values[lambda(list[i])] = i;
    }
    return Object.keys(values).map(function (key) {
        return list[values[key]];
    });
};

var isNum = module.exports.isNum = function (obj) {
    return obj && obj.asNumber;
};

module.exports.isPositiveNum = function (obj) {
    return isNum(obj) && obj.asNumber() >= 0;
};

module.exports.indent = function indent(value, indent) {
    if (!value) return '';
    return new Array((indent || 0) + 1).join('  ') + value;
};

module.exports.prettyMap = function (indent) {
    return function (x) {
        return x.pretty ? x.pretty(indent) : x.toString();
    };
};

module.exports.func = function func(name, values) {
    var sep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';

    return new objects.Func(name, new objects.Expression(values.map(function (v, index) {
        if (typeof v === 'number') {
            v = new objects.Number(v);
        }
        if (typeof sep === 'function') {
            return [sep(index), v];
        } else {
            return [index ? sep : null, v];
        }
    })));
};