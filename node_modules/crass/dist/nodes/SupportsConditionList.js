'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objects = require('../objects');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {string} combinator
     * @param {array} conditions
     */
    function SupportsConditionList(combinator, conditions) {
        _classCallCheck(this, SupportsConditionList);

        this.combinator = combinator;
        this.conditions = conditions;
    }

    /**
     * Adds an item to the head of the condition list
     * @param  {*} item
     * @return {void}
     */


    _createClass(SupportsConditionList, [{
        key: 'unshift',
        value: function unshift(item) {
            this.conditions.unshift(item);
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var _this = this;

            return utils.joinAll(this.conditions, ' ' + this.combinator + ' ', function (item) {
                var output = item.toString();
                return item instanceof objects.SupportsConditionList && item.combinator !== _this.combinator || item instanceof objects.Declaration ? '(' + output + ')' : output;
            });
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @param {object} kw
         * @return {SupportsConditionList}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.conditions = this.conditions.map(function (condition) {
                return condition.optimize(kw);
            });

            // OPT: Remove duplicate delcarations in @supports condition lists
            this.conditions = utils.uniq(null, this.conditions);

            // OPT: not(x) and not(y) and not(z) -> not(x or y or z)
            if (this.conditions.every(function (cond) {
                return cond instanceof objects.SupportsCondition && cond.negated;
            })) {
                var cond = new objects.SupportsCondition(new objects.SupportsConditionList(this.combinator === 'and' ? 'or' : 'and', this.conditions.map(function (condition) {
                    return condition.condition;
                })));
                cond.negate();
                return cond;
            }

            return this;
        }
    }]);

    return SupportsConditionList;
}();