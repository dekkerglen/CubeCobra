'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {SupportsConditionList} conditionList
     * @param {*} blocks
     */
    function Supports(conditionList, blocks) {
        _classCallCheck(this, Supports);

        this.conditionList = conditionList;
        this.blocks = blocks;
    }

    /**
     * @return {string}
     */


    _createClass(Supports, [{
        key: 'toString',
        value: function toString() {
            var output = '@supports ';
            output += this.conditionList.toString();
            output += '{' + utils.joinAll(this.blocks) + '}';
            return output;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var conditionList = this.conditionList.pretty(indent);
            var output = utils.indent('@supports ' + conditionList + ' {', indent) + '\n';
            output += this.blocks.map(function (line) {
                return utils.indent(line.pretty(indent + 1), indent);
            }).join('\n');
            output += utils.indent('}', indent) + '\n';
            return output;
        }

        /**
         * @param {object} kw
         * @return {Supports}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.conditionList = this.conditionList.optimize(kw);
            this.blocks = optimization.optimizeBlocks(this.blocks, kw);
            return this;
        }
    }]);

    return Supports;
}();