'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objects = require('../objects');
var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {array} selectors
     */
    function SelectorList(selectors) {
        _classCallCheck(this, SelectorList);

        this.selectors = selectors;
    }

    /**
     * Adds a selector to the list
     * @param  {*} selector
     * @return {void}
     */


    _createClass(SelectorList, [{
        key: 'push',
        value: function push(selector) {
            this.selectors.push(selector);
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return utils.joinAll(this.selectors, ',');
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var separator = this.toString().length < 80 ? ', ' : ',\n' + utils.indent(' ', indent).substr(1);
            return utils.joinAll(this.selectors, separator, utils.prettyMap(indent));
        }

        /**
         * @param {object} kw
         * @return {SelectorList}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.selectors = optimization.optimizeList(this.selectors, kw);

            // OPT: Ignore `* html` hacks from IE6
            if (!kw.saveie) {
                this.selectors = this.selectors.filter(function (s) {
                    return !/\* html($| .+)/.exec(s.toString());
                });
            }

            // OPT: Sort selector lists.
            this.selectors = this.selectors.sort(function (a, b) {
                return a.toString() < b.toString() ? -1 : 1;
            });
            // OPT: Remove duplicate selectors in a selector list.
            this.selectors = utils.uniq(null, this.selectors);

            this.selectors = this.selectors.filter(function (x) {
                return x;
            });
            if (!this.selectors.length) {
                return null;
            }

            // TODO(opt): Merge selectors.
            return this;
        }
    }]);

    return SelectorList;
}();