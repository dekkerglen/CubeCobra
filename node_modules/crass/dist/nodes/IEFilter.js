'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
    /**
     * @constructor
     * @param {string} blob
     */
    function IEFilter(blob) {
        _classCallCheck(this, IEFilter);

        this.ident = 'filter'; // Hack so that we can duck-type this as a Declaration.
        if (blob[0] === '-') {
            this.ident = '-ms-filter';
        }
        this.blob = blob;
    }

    /**
     * @return {string}
     */


    _createClass(IEFilter, [{
        key: 'toString',
        value: function toString() {
            return this.blob;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @param {object} kw
         * @return {IEFilter}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            if (kw.browser_min && kw.browser_min.ie && kw.browser_min.ie > 9) {
                return null;
            }

            this.blob = this.ident + ':' + /(?:\-ms\-)?filter\s*:\s*(.+)/.exec(this.blob)[1];

            return this;
        }
    }]);

    return IEFilter;
}();