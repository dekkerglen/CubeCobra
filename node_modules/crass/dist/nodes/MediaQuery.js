'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {string} type
     * @param {string} prefix
     * @param {MediaExpression} expression
     */
    function MediaQuery(type, prefix, expression) {
        _classCallCheck(this, MediaQuery);

        this.type = type;
        this.prefix = prefix;
        this.expression = expression || [];
    }

    /**
     * @return {string}
     */


    _createClass(MediaQuery, [{
        key: 'toString',
        value: function toString() {
            var output = [];
            if (this.type) {
                if (this.prefix) {
                    output.push(this.prefix);
                }
                output.push(this.type);
            }
            if (this.type && this.expression.length) {
                output.push('and');
            }
            if (this.expression.length) {
                output.push(utils.joinAll(this.expression, ' and '));
            }
            return output.join(' ');
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var output = [];
            if (this.type) {
                if (this.prefix) {
                    output.push(this.prefix);
                }
                output.push(this.type);
            }
            if (this.type && this.expression.length) {
                output.push('and');
            }
            if (this.expression.length) {
                output.push(utils.joinAll(this.expression, ' and ', utils.prettyMap(indent)));
            }
            return output.join(' ');
        }

        /**
         * @param {object} kw
         * @return {MediaQuery}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            // TODO(opt): sort expressions
            // TODO(opt): filter bunk expressions
            // OPT: Remove duplicate media expressions
            this.expression = utils.uniq(null, this.expression);
            this.expression = optimization.optimizeList(this.expression, kw);

            // OPT: Remove unsupported media queries.
            if (kw.browser_min && kw.browser_min.ie >= 10) {
                this.expression = this.expression.filter(function (expr) {
                    return !expr.ieCrap.slashZero;
                });
                if (!this.expression.length) {
                    return null;
                }
            }

            return this;
        }
    }]);

    return MediaQuery;
}();