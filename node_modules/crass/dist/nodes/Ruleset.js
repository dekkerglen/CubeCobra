'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objects = require('../objects');
var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {SelectorList} selector
     * @param {Declaration[]} content
     */
    function Ruleset(selector, content) {
        _classCallCheck(this, Ruleset);

        this.selector = selector;
        this.content = content;
    }

    /**
     * Returns the declaration content of the ruleset.
     * @return {string}
     */


    _createClass(Ruleset, [{
        key: 'contentToString',
        value: function contentToString() {
            return utils.joinAll(this.content, ';');
        }

        /**
         * Finds the intersection of declarations between this ruleset and the set of
         * declarations for a provided ruleset.
         * @param  {Ruleset} ruleset
         * @return {Declaration[]}
         */

    }, {
        key: 'declarationIntersections',
        value: function declarationIntersections(ruleset) {
            var localDeclarations = this.content.reduce(function (acc, cur) {
                acc[cur.ident] = cur;
                return acc;
            }, {});
            var intersection = [];
            for (var i = 0; i < ruleset.content.length; i++) {
                var foreignDecl = ruleset.content[i];
                if (localDeclarations.hasOwnProperty(foreignDecl.ident)) {
                    var localDecl = localDeclarations[foreignDecl.ident];
                    if (localDecl.important === foreignDecl.important) {
                        intersection.push(foreignDecl.ident);
                    }
                }
            }
            return intersection;
        }

        /**
         * Removes a declaration with the provided name from the ruleset
         * @param  {string} name
         * @return {void}
         */

    }, {
        key: 'removeDeclaration',
        value: function removeDeclaration(name) {
            this.content = this.content.filter(function (decl) {
                return decl.ident !== name;
            });
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return this.selector.toString() + '{' + this.contentToString() + '}';
        }

        /**
         * @param {int} indent
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var output = '';
            output += utils.indent(this.selector.pretty(indent) + ' {', indent) + '\n';
            output += this.content.map(function (line) {
                return utils.indent(line.pretty(indent + 1) + ';', indent + 1);
            }).join('\n') + '\n';
            output += utils.indent('}', indent) + '\n';
            return output;
        }

        /**
         * Optimizes the declarations within this ruleset
         * @param  {object} kw
         * @return {void}
         */

    }, {
        key: 'optimizeContent',
        value: function optimizeContent(kw) {
            this.content = optimization.optimizeDeclarations(this.content, kw);
        }

        /**
         * @param {object} kw
         * @return {Ruleset}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            // OPT: Ignore `* html` hacks from IE6
            if (!kw.saveie &&
            // Ignore selector lists, which handle this case separately
            !(this.selector instanceof objects.SelectorList) && /\* html($| .+)/.exec(this.selector.toString())) {
                return null;
            }

            this.selector = optimization.try_(this.selector, kw);
            if (!this.selector) {
                return null;
            }

            this.optimizeContent(kw);

            // OPT: Remove empty rulsets.
            if (!this.content.length) {
                return null;
            }
            return this;
        }
    }]);

    return Ruleset;
}();