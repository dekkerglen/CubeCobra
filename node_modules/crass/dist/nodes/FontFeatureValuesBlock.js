'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {string} blockName
     * @param {*} content
     */
    function FontFeatureValuesBlock(blockName, content) {
        _classCallCheck(this, FontFeatureValuesBlock);

        this.blockName = blockName;
        this.content = content;
    }

    /**
     * @return {string}
     */


    _createClass(FontFeatureValuesBlock, [{
        key: 'toString',
        value: function toString() {
            return this.blockName + '{' + utils.joinAll(this.content, ';') + '}';
        }

        /**
         * @param {int} indent
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var output = '';
            output += utils.indent(this.blockName + ' {') + '\n';
            output += this.content.map(function (line) {
                return utils.indent(line.pretty(indent + 1) + ';', indent + 1);
            }).join('\n') + '\n';
            output += utils.indent('}', indent) + '\n';
            return output;
        }

        /**
         * @param {object} kw
         * @return {FontFeatureValuesBlock}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.content = optimization.optimizeDeclarations(this.content, kw);
            return this;
        }
    }]);

    return FontFeatureValuesBlock;
}();