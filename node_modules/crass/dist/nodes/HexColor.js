'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var colorConvert = require('color-convert');

var colorOptimizer = require('../optimizations/color');
var colors = require('../colors');

module.exports = function () {
    /**
     * @constructor
     * @param {string} color
     */
    function HexColor(color) {
        _classCallCheck(this, HexColor);

        this.color = color;
    }

    /**
     * @return {string}
     */


    _createClass(HexColor, [{
        key: 'toString',
        value: function toString() {
            return this.color;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @return {HexColor}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            // OPT: Lowercase hex colors.
            this.color = this.color.toLowerCase();

            this.stripColorAlpha();

            if (this.color.length === 5 || this.color.length === 9) {
                var unalphaed = this.color.substr(1, this.color.length === 5 ? 3 : 6);
                var applier = function applier(funcName) {
                    return colorConvert.hex[funcName](unalphaed);
                };
                var alpha = this.color.length === 5 ? parseInt(this.color.substr(-1), 16) / 15 : parseInt(this.color.substr(-2), 16) / 255;
                return colorOptimizer(applier, alpha, kw);
            }

            // OPT: Shorten hex colors
            this.color = colorOptimizer.shortenHexColor(this.color);
            // OPT: Convert hex -> name when possible.
            if (this.color in colors.HEX_TO_COLOR) {
                return colors.HEX_TO_COLOR[this.color];
            }

            return this;
        }

        /**
         * @return {void}
         */

    }, {
        key: 'stripColorAlpha',
        value: function stripColorAlpha() {
            if (this.color.length === 5 && this.color[4] === 'f') {
                this.color = this.color.substr(0, 4);
                return;
            }
            if (this.color.length === 9 && this.color[7] === 'f' && this.color[8] === 'f') {
                this.color = this.color.substr(0, 7);
                return;
            }
        }
    }]);

    return HexColor;
}();