'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');

module.exports = function () {
    /**
     * @constructor
     * @param {NValue} nValue
     * @param {Number} offset
     */
    function LinearFunction(nValue, offset) {
        _classCallCheck(this, LinearFunction);

        this.nValue = nValue;
        this.offset = offset;
    }

    /**
     * @return {string}
     */


    _createClass(LinearFunction, [{
        key: 'toString',
        value: function toString() {
            if (this.nValue) {
                var operator = this.offset.value < 0 ? '-' : '+';
                return this.nValue.toString() + operator + this.offset.asUnsigned().toString();
            } else {
                return this.offset.toString();
            }
        }
    }, {
        key: 'pretty',


        /**
         * @return {string}
         */
        value: function pretty() {
            if (this.nValue) {
                var operator = this.offset.value < 0 ? ' - ' : ' + ';
                return this.nValue.toString() + operator + this.offset.asUnsigned().toString();
            } else {
                return this.offset.toString();
            }
        }
    }, {
        key: 'optimize',


        /**
         * @param {object} kw
         * @return {LinearFunction}
         */
        value: function optimize(kw) {
            this.nValue = optimization.try_(this.nValue, kw);
            return this;
        }
    }]);

    return LinearFunction;
}();