'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objects = require('../objects');
var unitTypes = require('./helpers/unitTypes');

module.exports = function () {
    /**
     * @constructor
     * @param {*} base
     * @param {string} operator
     * @param {Expression} term
     */
    function MathProduct(base, operator, term) {
        _classCallCheck(this, MathProduct);

        this.base = base;
        this.operator = operator;
        this.term = term;
    }

    /**
     * @return {string}
     */


    _createClass(MathProduct, [{
        key: 'toString',
        value: function toString() {
            var output = '';
            var base = this.base.toString();
            var term = this.term.toString();
            output += this.base instanceof objects.MathSum ? '(' + base + ')' : base;
            output += this.operator;
            output += this.term instanceof objects.MathSum ? '(' + term + ')' : term;
            return output;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            var output = '';
            var base = this.base.pretty();
            var term = this.term.pretty();
            output += this.base instanceof objects.MathSum ? '(' + base + ')' : base;
            output += ' ';
            output += this.operator;
            output += ' ';
            output += this.term instanceof objects.MathSum ? '(' + term + ')' : term;
            return output;
        }

        /**
         * @param {object} kw
         * @return {MathProduct}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.base = this.base.optimize(kw);
            this.term = this.term.optimize(kw);

            if (!this.base || !this.term) {
                return null;
            }

            // OPT: drop invalid calculations
            if (this.base instanceof objects.Dimension && this.term instanceof objects.Dimension && this.base.unit in unitTypes && this.term.unit in unitTypes && unitTypes[this.base.unit] !== unitTypes[this.term.unit]) {
                return null;
            }
            if (this.operator === '/') {
                if (!(this.term instanceof objects.Number)) {
                    return null;
                }
                if (this.term.asNumber() === 0) {
                    return null;
                }
            }

            if (this.base instanceof objects.Dimension && this.term instanceof objects.Dimension && this.base.unit === '%' && this.term.unit === '%') {
                if (this.operator === '*') {
                    return new objects.Dimension(new objects.Number(this.base.asNumber() * this.term.asNumber() / 100), '%');
                } else if (this.operator === '/') {
                    return new objects.Dimension(new objects.Number(this.base.asNumber() / this.term.asNumber() * 100), '%');
                }
            }

            if (this.base instanceof objects.Number && this.term instanceof objects.Dimension && this.operator === '*') {
                var val = new objects.Number(this.base.asNumber() * this.term.asNumber());
                return new objects.Dimension(val, this.term.unit);
            } else if (this.base instanceof objects.Dimension && this.term instanceof objects.Number && this.operator === '*') {
                var _val = new objects.Number(this.term.asNumber() * this.base.asNumber());
                return new objects.Dimension(_val, this.base.unit);
            } else if (this.base instanceof objects.Dimension && this.term instanceof objects.Number && this.base.asNumber() !== 0 && this.operator === '/') {
                var _val2 = new objects.Number(this.term.asNumber() / this.base.asNumber());
                return new objects.Dimension(_val2, this.base.unit);
            } else if (this.base instanceof objects.Number && this.term instanceof objects.Number) {
                if (this.operator === '*') {
                    return new objects.Number(this.base.value * this.term.value);
                } else if (this.operator === '/' && this.term.value !== 0) {
                    return new objects.Number(this.base.value / this.term.value);
                }
            }

            return this;
        }
    }]);

    return MathProduct;
}();