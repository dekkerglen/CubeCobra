'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {array} conditions
     */
    function SimpleSelector(conditions) {
        _classCallCheck(this, SimpleSelector);

        this.conditions = conditions;
    }

    /**
     * @return {string}
     */


    _createClass(SimpleSelector, [{
        key: 'toString',
        value: function toString() {
            return utils.joinAll(this.conditions);
        }

        /**
         * @param {int} indent
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            return utils.joinAll(this.conditions, null, utils.prettyMap(indent));
        }

        /**
         * @param {object} kw
         * @return {SimpleSelector}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.conditions = optimization.optimizeList(this.conditions, kw);

            if (!this.conditions.length || this.conditions.some(function (x) {
                return x === null;
            })) {
                return null;
            }

            // OPT: Remove duplicate conditions from a simple selector.
            this.conditions = utils.uniq(null, this.conditions);

            // OPT(O1): Remove unnecessary wildcard selectors
            if (kw.o1 && this.conditions.length > 1) {
                this.conditions = this.conditions.filter(function (i) {
                    return i.toString() !== '*';
                });
            }
            return this;
        }
    }]);

    return SimpleSelector;
}();