'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var path = require('path');

var sdu = require('strong-data-uri');
var svgo = require('svgo');

var objects = require('../objects');

module.exports = function () {
    /**
     * @constructor
     * @param {string} uri
     */
    function URI(uri) {
        _classCallCheck(this, URI);

        uri = uri.trim();
        if (uri[0] === uri[uri.length - 1] && (uri[0] === '"' || uri[0] === "'") || uri.indexOf(')') !== -1) {
            uri = new objects.String(uri.substring(1, uri.length - 1));
        }
        this.uri = uri;
    }

    /**
     * @return {string}
     */


    _createClass(URI, [{
        key: 'asString',
        value: function asString() {
            if (this.uri instanceof objects.String) {
                return this.uri;
            }
            return new objects.String(this.uri);
        }

        /**
         * @return {string}
         */

    }, {
        key: 'asRawString',
        value: function asRawString() {
            if (this.uri instanceof objects.String) {
                return this.uri.value.trim();
            }
            return this.uri.trim();
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var uri = this.uri;
            if (typeof uri === 'string' && uri.indexOf(')') !== -1) {
                uri = new objects.String(uri.trim());
            } else if (typeof uri === 'string') {
                return 'url(' + uri.trim().replace(/\s/g, '\\ ') + ')';
            }
            var rawStr = uri.asString(true);
            return 'url(' + uri.asString(rawStr.indexOf(')') === -1) + ')';
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @return {URI}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            var self = this;
            var isURL = this.isURL();

            // OPT: Normalize URIs
            if (kw.o1 && isURL) {
                var rawURI = this.asRawString();
                var urlCut = /https?:\/\/.+?(\/.*)/.exec(rawURI);
                if (urlCut) {
                    var urlPath = urlCut[1];
                    var optimizedPath = path.normalize(urlPath);
                    this.uri = rawURI.slice(0, rawURI.length - urlCut[1].length) + optimizedPath;
                } else {
                    this.uri = path.normalize(rawURI);
                }
                this.uri = this.uri.replace(/\\/g, '\/');
            } else if (kw.o1 && !isURL) {
                var content = this.asRawString();
                if (content.slice(0, 5) === 'data:') {
                    var out = void 0;
                    try {
                        out = sdu.decode(content);
                    } catch (e) {}
                    if (!out) {
                        var split = content.split(',');
                        if (split.length === 1) {
                            return self;
                        }
                        out = split[1];
                    }
                    try {
                        self = this.optimizeDataURI(out);
                        if (!self) {
                            return null;
                        }
                    } catch (e) {
                        return self;
                    }
                }
            }

            if (self.uri instanceof objects.String) {
                self.uri = self.uri.optimize(kw);
                if (!self.uri) {
                    return null;
                }
            }
            return self;
        }

        /**
         * Optimizes data URIs
         * @param  {Buffer} data The output of strong-data-uri
         * @return {URI}      The optimized URI
         */

    }, {
        key: 'optimizeDataURI',
        value: function optimizeDataURI(data) {
            var newContent = void 0;
            if (data.mimetype === 'image/svg+xml') {
                var s = new svgo({});
                try {
                    s.optimize(data.toString('utf-8'), function (data) {
                        newContent = data.data;
                    });
                } catch (e) {
                    return this;
                }
            } else {
                return this;
            }

            if (!newContent) {
                return null;
            }

            return new URI(sdu.encode(newContent, data.mimetype));
        }

        /**
         * Returns whether the URI is a URL
         * @return {Boolean}
         */

    }, {
        key: 'isURL',
        value: function isURL() {
            var content = this.asRawString();
            if (content.slice(0, 5) === 'data:') {
                return false;
            }

            if (content.slice(0, 5) === 'file:') {
                return false;
            }

            return true;
        }
    }]);

    return URI;
}();