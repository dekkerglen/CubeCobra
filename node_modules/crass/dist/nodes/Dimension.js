'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');

var LENGTH_UNITS = new Set(['cap', 'ch', 'em', 'ex', 'ic', 'lh', 'rem', 'rlh', 'vh', 'vw', 'vi', 'vb', 'vmin', 'vmax', 'px', 'mm', 'q', 'cm', 'in', 'pt', 'pc', 'mozmm']);

var declsToNotOptimizePercents = {
    'height': true,
    'width': true,
    'flex': true,
    'flex-basis': true
};

module.exports = function () {
    /**
     * @constructor
     * @param {Number} number
     * @param {string} unit
     */
    function Dimension(number, unit) {
        _classCallCheck(this, Dimension);

        this.number = number;
        this.unit = unit || '';
    }

    /**
     * Return just the numeric portion of the dimension, as a JS number
     * @return {number}
     */


    _createClass(Dimension, [{
        key: 'asNumber',
        value: function asNumber() {
            return this.number.asNumber();
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            if (Math.abs(this.number.value) === 0 && this.unit !== '%' && LENGTH_UNITS.has(this.unit)) {
                return '0';
            } else {
                return this.number.toString() + this.unit;
            }
        }

        /**
         * @param {int} indent
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            return this.number.pretty(indent) + this.unit;
        }

        /**
         * @param {object} kw
         * @return {Dimension}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            if (!this.unit) {
                return this.number;
            }
            if (kw.func !== 'hsl' && kw.func !== 'hsla' && Math.abs(this.number.value) === 0 && !(kw.declarationName in declsToNotOptimizePercents) && LENGTH_UNITS.has(this.unit)) {
                return this.number;
            }
            return optimization.unit(this, kw);
        }
    }]);

    return Dimension;
}();