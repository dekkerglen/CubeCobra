'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');

module.exports = function () {
    /**
     * @constructor
     * @param {string} ident
     * @param {string} comparison
     * @param {string} value
     */
    function AttributeSelector(ident, comparison, value) {
        _classCallCheck(this, AttributeSelector);

        this.ident = ident;
        this.comparison = comparison;
        this.value = value;
    }

    /**
     * @return {string}
     */


    _createClass(AttributeSelector, [{
        key: 'toString',
        value: function toString() {
            // TODO: Handle quoting/unquoting
            if (this.value) {
                var value = this.value.toString();
                if (this.value.asString) {
                    var rawValue = this.value.asString(true);
                    var newValue = rawValue.match(/^[a-z][\w\\]*$/i) ? rawValue : this.value.asString(false);
                    if (newValue.length <= value.length) {
                        value = newValue;
                    }
                }
                return '[' + this.ident + this.comparison + value + ']';
            } else {
                return '[' + this.ident + ']';
            }
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @param {object} kw
         * @return {AttributeSelector}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            // OPT: Lowercase attribute names.
            this.ident = optimization.try_(this.ident, kw);
            this.value = optimization.try_(this.value, kw);

            if (!this.ident) {
                return null;
            }

            return this;
        }
    }]);

    return AttributeSelector;
}();