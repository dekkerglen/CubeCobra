'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../../optimization');

module.exports = function chainedSelectorFactory(name, operator) {
    var c = function () {
        function c(ancestor, descendant) {
            _classCallCheck(this, c);

            this.ancestor = ancestor;
            this.descendant = descendant;
        }

        /**
         * @return {string}
         */


        _createClass(c, [{
            key: 'toString',
            value: function toString() {
                return '' + this.ancestor + this.operator + this.descendant;
            }

            /**
             * @param {int} indent
             * @return {string}
             */

        }, {
            key: 'pretty',
            value: function pretty(indent) {
                var paddedType = this.operator === ' ' ? ' ' : ' ' + this.operator + ' ';
                return this.ancestor.pretty(indent) + paddedType + this.descendant.pretty(indent);
            }

            /**
             * @param  {object} kw
             * @return {*}
             */

        }, {
            key: 'optimize',
            value: function optimize(kw) {
                this.ancestor = optimization.try_(this.ancestor, kw);
                this.descendant = optimization.try_(this.descendant, kw);

                if (!this.ancestor || !this.descendant) {
                    return null;
                }

                return this;
            }
        }]);

        return c;
    }();

    c.prototype.operator = operator;

    return c;
};