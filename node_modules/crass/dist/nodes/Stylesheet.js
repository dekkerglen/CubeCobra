'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objects = require('../objects');
var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {Charset} charset
     * @param {Import[]} imports
     * @param {Namespace[]} namespaces
     * @param {*} content
     */
    function Stylesheet(charset, imports, namespaces, content) {
        _classCallCheck(this, Stylesheet);

        this.charset = charset;
        this.imports = imports;
        this.namespaces = namespaces;
        this.content = content;
    }

    /**
     * @return {string}
     */


    _createClass(Stylesheet, [{
        key: 'toString',
        value: function toString() {
            var output = '';
            if (this.charset) {
                output += this.charset.toString();
            }
            if (this.imports.length) {
                output += utils.joinAll(this.imports);
            }
            if (this.namespaces.length) {
                output += utils.joinAll(this.namespaces);
            }
            if (this.content.length) {
                output += utils.joinAll(this.content);
            }
            return output;
        }
    }, {
        key: 'pretty',


        /**
         * @return {string}
         */
        value: function pretty() {
            var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var output = '';
            if (this.charset) {
                output += this.charset.pretty(indent);
            }
            if (this.imports.length) {
                output += utils.joinAll(this.imports, null, utils.prettyMap(indent));
            }
            if (this.namespaces.length) {
                output += utils.joinAll(this.namespaces, null, utils.prettyMap(indent));
            }
            if (this.content.length) {
                output += utils.joinAll(this.content, null, utils.prettyMap(indent));
            }
            return output;
        }
    }, {
        key: 'optimize',


        /**
         * @param {object} kw
         * @return {Stylesheet}
         */
        value: function optimize() {
            var _this = this;

            var kw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (this.charset) {
                this.charset = optimization.try_(this.charset, kw);
            }
            if (this.imports.length) {
                this.imports = optimization.optimizeList(this.imports, kw);
            }
            if (this.namespaces.length) {
                this.namespaces = optimization.optimizeList(this.namespaces, kw);
            }

            // OPT: Remove overridden keyframe blocks
            var keyframeMap = {};
            var toRemove = new Set();
            this.content.forEach(function (x, i) {
                if (!(x instanceof objects.Keyframes)) {
                    return;
                }
                var prefix = x.vendorPrefix || '--';
                if (!(prefix in keyframeMap)) {
                    keyframeMap[prefix] = {};
                }
                if (x.name in keyframeMap[prefix]) {
                    toRemove.add(keyframeMap[prefix][x.name]);
                }
                keyframeMap[prefix][x.name] = i;
            });
            if (toRemove.size) {
                var ordered = Array.from(toRemove.values()).sort(function (a, b) {
                    return b - a;
                });
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = ordered[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var i = _step.value;

                        this.content.splice(i, 1);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }

            var kwKFM = {};
            Object.keys(keyframeMap).forEach(function (prefix) {
                var m = {};
                Object.keys(keyframeMap[prefix]).forEach(function (name) {
                    m[name] = _this.content[keyframeMap[prefix][name]];
                });
                kwKFM[prefix] = m;
            });
            kw.keyframeMap = kwKFM;

            this.content = optimization.optimizeBlocks(this.content, kw);

            return this;
        }
    }]);

    return Stylesheet;
}();