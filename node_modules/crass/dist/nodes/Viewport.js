'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {array} content
     * @param {string} vendorPrefix
     */
    function Viewport(content, vendorPrefix) {
        _classCallCheck(this, Viewport);

        this.content = content;
        this.vendorPrefix = vendorPrefix;
    }

    /**
     * @return {string}
     */


    _createClass(Viewport, [{
        key: 'getBlockHeader',
        value: function getBlockHeader() {
            return this.vendorPrefix ? '@' + this.vendorPrefix + 'viewport' : '@viewport';
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var output = this.getBlockHeader();
            output += '{';
            output += utils.joinAll(this.content, ';');
            output += '}';
            return output;
        }

        /**
         * @param {int} indent
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var output = '';
            output += utils.indent(this.getBlockHeader() + ' {') + '\n';
            output += this.content.map(function (line) {
                return utils.indent(line.pretty(indent + 1), indent);
            }).join(';\n') + '\n';
            output += utils.indent('}', indent) + '\n';
            return output;
        }

        /**
         * @param {object} kw
         * @return {Viewport}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            var oldPrefix = void 0;
            if (this.vendorPrefix) {
                oldPrefix = kw.vendorPrefix;
                kw.vendorPrefix = this.vendorPrefix;
            }

            this.content = optimization.optimizeDeclarations(this.content, kw);
            kw.vendorPrefix = oldPrefix;

            if (!this.content.length) return null;

            return this;
        }
    }]);

    return Viewport;
}();