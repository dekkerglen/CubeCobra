'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {MediaQuery[]} media
     * @param {*} content
     */
    function Media(media, content) {
        _classCallCheck(this, Media);

        this.media = media;
        this.content = content;
    }

    /**
     * @return {string}
     */


    _createClass(Media, [{
        key: 'mediaQueriesToString',
        value: function mediaQueriesToString() {
            return utils.joinAll(this.media, ',');
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var queryString = this.mediaQueriesToString();
            return '@media' + (queryString[0] === '(' ? '' : ' ') + queryString + '{' + utils.joinAll(this.content) + '}';
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var output = '';
            output += utils.indent('@media ' + utils.joinAll(this.media, ', ', utils.prettyMap(indent)) + ' {') + '\n';
            output += this.content.map(function (line) {
                return utils.indent(line.pretty(indent + 1), indent);
            }).join('\n') + '\n';
            output += utils.indent('}', indent) + '\n';
            return output;
        }

        /**
         * @param {object} kw
         * @return {Media}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.media = optimization.optimizeList(this.media, kw);

            // OPT: Remove duplicate media queries.
            this.media = utils.uniq(null, this.media);

            if (!this.media.length) {
                return null;
            }

            return this.optimizeContent(kw);
        }

        /**
         * @param {object} kw
         * @return {Media}
         */

    }, {
        key: 'optimizeContent',
        value: function optimizeContent(kw) {
            this.content = optimization.optimizeBlocks(this.content, kw);
            if (!this.content.length) {
                return null;
            }

            return this;
        }
    }]);

    return Media;
}();