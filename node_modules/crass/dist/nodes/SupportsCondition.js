'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var objects = require('../objects');

module.exports = function () {
    /**
     * @constructor
     * @param {Declaration} condition
     */
    function SupportsCondition(condition) {
        _classCallCheck(this, SupportsCondition);

        this.condition = condition;
        this.negated = false;
    }

    /**
     * Negates the condition
     * @return {void}
     */


    _createClass(SupportsCondition, [{
        key: 'negate',
        value: function negate() {
            this.negated = !this.negated;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var output = '';
            if (this.negated) {
                output = 'not ';
            }
            output += '(';
            output += this.condition;
            output += ')';
            return output;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @param {object} kw
         * @return {SupportsCondition}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            this.condition = this.condition.optimize(kw);
            // OPT: not(not(foo:bar)) -> (foo:bar)
            if (this.condition instanceof objects.SupportsCondition && this.negated && this.condition.negated) {
                this.condition.negate();
                return this.condition;
            }
            return this;
        }
    }]);

    return SupportsCondition;
}();