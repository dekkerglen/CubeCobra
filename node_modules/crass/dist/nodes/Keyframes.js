'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var browserSupport = require('../browser_support');
var objects = require('../objects');
var optimization = require('../optimization');
var utils = require('../utils');

module.exports = function () {
    /**
     * @constructor
     * @param {string} name
     * @param {*} content
     * @param {string} vendorPrefix
     */
    function Keyframes(name, content, vendorPrefix) {
        _classCallCheck(this, Keyframes);

        this.name = name;
        this.content = content;
        this.vendorPrefix = vendorPrefix;
    }

    /**
     * @return {string}
     */


    _createClass(Keyframes, [{
        key: 'getBlockHeader',
        value: function getBlockHeader() {
            return this.vendorPrefix ? '@' + this.vendorPrefix + 'keyframes ' : '@keyframes ';
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var output = this.getBlockHeader();
            output += this.name;
            output += '{';
            output += utils.joinAll(this.content);
            output += '}';
            return output;
        }

        /**
         * @param {int} indent
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty(indent) {
            var output = '';
            output += utils.indent(this.getBlockHeader() + this.name + ' {') + '\n';
            output += this.content.map(function (line) {
                return utils.indent(line.pretty(indent + 1), indent);
            }).join('\n') + '\n';
            output += utils.indent('}', indent) + '\n';
            return output;
        }

        /**
         * @param {object} kw
         * @return {Keyframes}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            // OPT: Remove unsupported keyframes blocks.
            if (!browserSupport.supportsKeyframe(this.vendorPrefix, kw)) {
                return null;
            }

            kw.insideKeyframes = this.name;

            if (this.vendorPrefix) {
                kw.vendorPrefix = this.vendorPrefix;
            }

            // OPT: Combine keyframes with identical stops.
            this.content = optimization.combineList(function (item) {
                return item.stop.toString();
            }, function (a, b) {
                return new objects.Keyframe(a.stop, a.content.concat(b.content));
            }, this.content);
            // OPT: Sort keyframes.
            this.content = this.content.sort(function (a, b) {
                return a.stop.toString().localeCompare(b.stop.toString());
            });

            this.content = optimization.optimizeList(this.content, kw);

            // OPT: Combine duplicate keyframes
            var cache = {};
            this.content = this.content.reduce(function (a, b) {
                var content = b.content.toString();
                if (content in cache) {
                    cache[content].stop = cache[content].stop.concat(b.stop);
                    return a;
                }
                cache[content] = b;
                a.push(b);
                return a;
            }, []);

            delete kw.vendorPrefix;
            delete kw.insideKeyframes;

            return this;
        }
    }]);

    return Keyframes;
}();