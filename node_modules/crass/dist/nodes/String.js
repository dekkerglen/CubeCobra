'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var keywords = ['cursive', 'fantasy', 'monospace', 'sans-serif', 'serif'];

module.exports = function () {
    /**
     * @constructor
     * @param {string} value
     */
    function String(value) {
        _classCallCheck(this, String);

        this.value = value.toString().replace(/\\(['"])/g, '$1');

        this._noQuotes = false;
    }

    /**
     * @param {bool} raw Whether to output the raw string
     * @return {string}
     */


    _createClass(String, [{
        key: 'asString',
        value: function asString(raw) {
            if (raw) {
                return this.value.replace(/(\s)/g, '\\$1');
            }
            return this.toString();
        }

        /**
         * @return {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            if (this._noQuotes) {
                return this.value;
            }
            var single_ = "'" + this.value.replace(/'/g, "\\'") + "'";
            var double_ = '"' + this.value.replace(/"/g, '\\"') + '"';
            // OPT: Choose the shortest string variation
            return single_.length < double_.length ? single_ : double_;
        }

        /**
         * @return {string}
         */

    }, {
        key: 'pretty',
        value: function pretty() {
            return this.toString();
        }

        /**
         * @return {String}
         */

    }, {
        key: 'optimize',
        value: function optimize(kw) {
            var _this = this;

            if (kw.declarationName === 'font-family' && /[\w ]/.exec(this.value) && keywords.every(function (keyword) {
                return _this.value.toLowerCase().indexOf(keyword) === -1;
            })) {
                var newValue = this.value.trim().replace(/ (?=\d+\b)/g, '\\ ');
                if (newValue.length <= this.value.length + 2) {
                    this._noQuotes = true;
                    this.value = newValue;
                }
            }
            return this;
        }
    }]);

    return String;
}();